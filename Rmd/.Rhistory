rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
?som
require("kohonen")
?som
rmarkdown::render_site()
?orclus
library(orclus)
?orclus
# definition of a function for parameterized data simulation
sim.orclus <- function(k = 3, nk = 100, d = 10, l = 4, sd.cl = 0.05, sd.rest = 1, locshift = 1){
### input parameters for data generation
# k           number of clusters
# nk          observations per cluster
# d           original dimension of the data
# l           subspace dimension where the clusters are concentrated
# sd.cl       (univariate) standard deviations for data generation (within cluster subspace concentration)
# sd.rest     standard deviations in the remaining space
# locshift    parameter of a uniform distribution to sample different cluster means
x <- NULL
for(i in 1:k){
# cluster centers
apts <- locshift*matrix(runif(l*k), ncol = l)
# sample points in original space
xi.original <- cbind(matrix(rnorm(nk * l, sd = sd.cl), ncol=l) + matrix(rep(apts[i,], nk), ncol = l, byrow = TRUE),
matrix(rnorm(nk * (d-l), sd = sd.rest), ncol = (d-l)))
# subspace generation
sym.mat <- matrix(nrow=d, ncol=d)
for(m in 1:d){
for(n in 1:m){
sym.mat[m,n] <- sym.mat[n,m] <- runif(1)
}
}
subspace <- eigen(sym.mat)$vectors
# transformation
xi.transformed <- xi.original %*% subspace
x <- rbind(x, xi.transformed)
}
clids <- rep(1:k, each = nk)
result <- list(x = x, cluster = clids)
return(result)
}
# simulate data, you can play with different parameterizations...
simdata <- sim.orclus(k = 3, nk = 200, d = 15, l = 4, sd.cl = 0.05, sd.rest = 1, locshift = 1)
# apply kmeans and orclus
kmeans.res2 <- kmeans(simdata$x, 3)
orclus.res2 <- orclus(x = simdata$x, k = 3, l = 4, k0 = 15, a = 0.75)
cat("SC: ", orclus.res2$sparsity.coefficient, "\n")
# compare results
table(kmeans.res2$cluster, simdata$cluster)
table(orclus.res2$cluster, simdata$cluster)
rmarkdown::render_site()
clus1.v1 <- runif(100)
clus2.v1 <- runif(100)
xample <- rbind(cbind(clus1.v1, 0.5 - clus1.v1), cbind(clus2.v1, -0.5 + clus2.v1))
plot(xample, col=rep(1:2, each=100))
kmeans.res <- kmeans(xample, 2)
plot(xample, col = kmeans.res$cluster)
orclus.res <- orclus(x = xample, k = 2, l = 1, k0 = 8, a = 0.5)
plot(xample, col = orclus.res$cluster)
par(mfrow=c(1,2))
for(i in 1:length(orclus.res$size)) plot(xample %*% orclus.res$subspaces[[i]], col = orclus.res$cluster, ylab = paste("Identified subspace for cluster",i))
orclus.res$subspaces[[1]]
orclus.res$subspaces[[2]]
dim(data)
knitr::opts_chunk$set(cache=TRUE)
knitr::opts_chunk$set(unnamed.chunk.label = "B")
library("orclus")
cluster <- orclus(data,k=10,l=3,k0=50,inner.loops=20)
for(i in 1:length(cluster$size)) {
plot(as.matrix(data) %*% cluster$subspaces[[i]], col = cluster$cluster, ylab = paste("Identified subspace for cluster",i))
}
dim(as.matrix(data))
dim(cluster$subspaces)
dim(cluster$subspaces[[1]])
dim(cluster$subspaces[[2]])
dim(cluster$subspaces[[3]])
dim(cluster$subspaces[[4]])
dim(cluster$subspaces[[5]])
dim(as.matrix(data) %*% cluster$subspaces[[1]])
plot(as.matrix(data) %*% cluster$subspaces[[i]], col = cluster$cluster, ylab = paste("Identified subspace for cluster",i))
tmp <- as.matrix(data) %*% cluster$subspaces[[i]]
plot(tmp)
dim(tmp)
plot3D
library(plot3D)
plot3D
plot3D(tmp)
plot3d(tmp)
library("plot3D")
??plot3D
example(persp3D)
persp3d(tmp)
persp3D(tmp)
persp3D(tmp[,1],tmp[,2],tmp[,3])
scatterplot3d(tmp[,1],tmp[,2],tmp[,3])
scatterplot3d::scatterplot3d(tmp[,1],tmp[,2],tmp[,3])
scatterplot3d::scatterplot3d(tmp[,1],tmp[,2],tmp[,3],col=cluster$cluster)
cluster$cluster
scatterplot3d::scatterplot3d(tmp[,1],tmp[,2],tmp[,3],col=cluster$cluster)
scatterplot3d::scatterplot3d(tmp[,1],tmp[,2],tmp[,3],col=cluster$cluster,pch=".")
scatterplot3d::scatterplot3d(tmp[,1],tmp[,2],tmp[,3],pch=".")
scatterplot3d::scatterplot3d(tmp[,1],tmp[,2],tmp[,3],pch=".",color=cluster$cluster)
rmarkdown::render_site()
require("RWeka")
require("rJava")
require("RWeka")
require("RWeka")
require("RWeka")
q("no")
require("RWeka")
require("RWekajars")
require("RWeka")
require("rJava")
require("RWeka")
require("RWeka")
rmarkdown::render_site()
require("FSelector")
require("RWeka")
install.packages(c("RWekajars", "RWeka"))
??hclust
require("kernlab")
dim(data)
knitr::opts_chunk$set(cache=TRUE)
knitr::opts_chunk$set(unnamed.chunk.label = "B")
sample <- sample(dim(data)[1],10000)
dists <- dist(data[sample,])
#dists <- dist(data)
clusters <- hclust(dists, method = 'average')
dim(dists)
length(dists)
10000*9999/2
require("NbClust")
require("NbClust")
?NbClust
set.seed(1)
x<-rbind(matrix(rnorm(100,sd=0.1),ncol=2),
matrix(rnorm(100,mean=1,sd=0.2),ncol=2),
matrix(rnorm(100,mean=5,sd=0.1),ncol=2),
matrix(rnorm(100,mean=7,sd=0.2),ncol=2))
res<-NbClust(x, distance = "euclidean", min.nc=2, max.nc=8,
method = "complete", index = "ch")
res$All.index
res$Best.nc
res$Best.partition
set.seed(1)
x<-rbind(matrix(rnorm(100,sd=0.1),ncol=2),
matrix(rnorm(100,mean=1,sd=0.2),ncol=2),
matrix(rnorm(100,mean=5,sd=0.1),ncol=2),
matrix(rnorm(100,mean=7,sd=0.2),ncol=2))
res<-NbClust(x, distance = "euclidean", min.nc=2, max.nc=8,
method = "complete", index = "allong")
res$All.index
res$Best.nc
res$Best.partition
set.seed(1)
x<-rbind(matrix(rnorm(100,sd=0.1),ncol=2),
matrix(rnorm(100,mean=1,sd=0.2),ncol=2),
matrix(rnorm(100,mean=5,sd=0.1),ncol=2),
matrix(rnorm(100,mean=7,sd=0.2),ncol=2))
res<-NbClust(x, distance = "euclidean", min.nc=2, max.nc=8,
method = "complete", index = "alllong")
res$All.index
res$Best.nc
res$Best.partition
rmarkdown::render_site()
knitr::opts_chunk$set(cache=TRUE)
knitr::opts_chunk$set(unnamed.chunk.label = "B")
library("mvtnorm")
set.seed(10)
setA <- rmvnorm(1000,c(0,0),matrix(c(1,0,0,1),2,2))
setB <- rmvnorm(1000,c(3,3),matrix(c(1,0,0,1),2,2))
mock.data <- rbind(setA,setB)
plot(mock.data)
rc <- sample(1:dim(mock.data)[1],2)
plot(mock.data)
points(mock.data[rc,],pch=16,col="seagreen",cex=2)
d <- function(center,data){
s1 <- t(apply(data,1,"-",center))
s2 <- s1^2
s3 <- apply(s2,1,sum)
d <- sqrt(s3)
return(d)
}
# We define a function to do that
E <- function(data,centres){
# First some definitions...
n.data <- dim(data)[1]
n.dims <- dim(data)[2]
n.cl <- dim(centres)[1]
dists <- matrix(NA,n.data,n.cl)
# Then, compute distances from each point to each cluster centre
for (i in 1:n.cl) dists[,i] <- d(centres[i,],data)
# ... and define the cluster as the index with the minimum distance
cluster <- apply(dists,1,which.min)
return(cluster)
}
centres <- mock.data[rc,]
# Call the function
cluster <- E(mock.data,centres)
plot(mock.data,pch=16,col=cluster)
points(mock.data[rc,],pch=16,col="seagreen",cex=2)
# We define a function to recalculate the centres...
M <- function(data,cluster){
labels <- unique(cluster)
n.cl <- length(labels)
n.dims <- dim(data)[2]
means <- matrix(NA,n.cl,n.dims)
for (i in 1:n.cl)  means[i,] <- apply(data[cluster==labels[i],],2,mean)
return(means)
}
means <- M(mock.data,cluster)
plot(mock.data,pch=16,col=cluster)
points(mock.data[rc,],pch=16,col="seagreen",cex=2)
points(means,pch=16,col="green",cex=2)
cluster <- E(mock.data,means)
plot(mock.data,pch=16,col=cluster)
points(means,pch=16,col="seagreen",cex=2)
km <- kmeans(mock.data,2)
plot(mock.data,col=km$cluster,pch=16)
points(km$centers,pch=16,col="seagreen",cex=2)
data <- read.table("OGLE.dat",sep=",",header=T)
attach(data)
plot(logP,WI,pch=".")
mask <- (logP < 1-0.754 & logP > 1-0.76) | (logP < 1-0.827 & logP > 1-0.833) | (logP < 1-0.872 & logP > 1-0.873)
data <- data[!mask,]
attach(data)
plot(logP,WI,pch=".")
km10.ogle <- kmeans(data,10)
plot(logP,WI,pch=".",col=km10.ogle$cluster)
set.seed(5)
km25.ogle <- kmeans(data,25,iter.max = 20)
plot(logP,WI,pch=".",col=km25.ogle$cluster)
points(km25.ogle$centers[,c(1,6)],col=seq(1,25),pch=16,cex=2)
set.seed(15)
km25.ogle <- kmeans(data,25,iter.max=20)
plot(logP,WI,pch=".",col=km25.ogle$cluster)
points(km25.ogle$centers[,c(1,6)],col=seq(1,25),pch=16,cex=2)
plot(logP,phi21,pch=".",col=km25.ogle$cluster)
set.seed(15)
km25.ogle <- kmeans(data[,-4],25,iter.max=20)
plot(logP,WI,pch=".",col=km25.ogle$cluster)
points(km25.ogle$centers[,c(1,5)],col=seq(1,25),pch=16,cex=2)
set.seed(10)
setA <- rmvnorm(1000,c(0,0),matrix(c(3,0,0,3),2,2))
setB <- rmvnorm(1000,c(3,3),matrix(c(1,0.99,0.99,1),2,2))
setC <- rmvnorm(1000,c(-1,4),matrix(c(1,-0.9,-0.9,1),2,2))
mock.data <- rbind(setA,setB,setC)
plot(mock.data)
km <- kmeans(mock.data,3)
plot(mock.data,col=km$cluster,pch=16,cex=.5)
points(km$centers,pch=15,col="orange")
loglikNormal <- function(D,means,Sigmas,cluster){
labels <- unique(clusters)
n.cl <- length(labels)
loglik <- 0
for (i in 1:n.cl)
{
logliki <- apply(means[i,],1,dmvnorm,x=D[cluster==i,],sigma=Sigma[,,i])
logliki <- apply(logliki,2,sum)
loglik <- loglik+logliki
}
return(loglik)
}
rc <- sample(1:dim(mock.data)[1],3)
plot(mock.data,pch=16,cex=.5)
points(mock.data[rc,],pch=16,col="seagreen",cex=2)
# We start with a random selection of points as centres...
means <- mock.data[rc,]
Sigmas <- array(0,dim=c(2,2,3))
# And diagonal (unit) matrices for the covariances.
Sigmas[1,1,]=1
Sigmas[2,2,]=1
# And here is the function to compute the expected values of the
# latent variables:
E <- function(data,means,Sigmas)
{
n.cl <- dim(means)[1]
probs <- matrix(NA,nrow=dim(data)[1],ncol=n.cl)
for (i in 1:n.cl)
{
probs[,i] <- dmvnorm(x=data,mean=means[i,],sigma=Sigmas[,,i])
}
cluster <- max.col(probs)
return(cluster)
}
# OK. let us do it:
cluster <- E(mock.data,means,Sigmas)
points(mock.data,pch=16,cex=.5,col=cluster)
points(mock.data[rc,],pch=16,col="seagreen",cex=2)
M <- function(data,cluster){
n.cl <- length(unique(cluster))
for (i in 1:n.cl)
{
means[i,] <- apply(data[cluster==i,],2,mean)
Sigmas[,,i] <- cov(data[cluster==i,])
}
M <- list(means=means,covariances=Sigmas)
return(M)
}
plot(mock.data,pch=16,cex=.5)
points(mock.data[rc,],pch=16,col="seagreen",cex=2)
points(mock.data,pch=16,cex=.5,col=cluster)
points(mock.data[rc,],pch=16,col="seagreen",cex=2)
parameters <- M(mock.data,cluster)
points(parameters$means,pch=16,col="orange",cex=2)
cluster <- E(mock.data,parameters$means,parameters$covariances)
plot(mock.data,pch=16,cex=.5,col=cluster)
points(parameters$means,pch=16,col="orange",cex=2)
for (i in 1:50)
{
parameters <- M(mock.data,cluster)
cluster.new <- E(mock.data,parameters$means,parameters$covariances)
ndiff <- sum(cluster!=cluster.new)
print(ndiff)
cluster <- cluster.new
plot(mock.data,pch=16,cex=.5,col=cluster)
points(parameters$means,pch=16,col="orange",cex=2)
if(ndiff==0) break
}
library("dbscan")
cluster <- dbscan(data[,-4],minPts = 5, eps=0.02)
mask <- cluster$cluster != 0
plot(data[,c(1,6)],pch=".")
points(data[mask,c(1,6)],pch=16,cex=.2,col=(cluster$cluster[mask]+1))
plot(data[,c(1,2)],pch=".")
points(data[mask,c(1,2)],pch=16,cex=.2,col=(cluster$cluster[mask]+1))
plot(data[,c(1,3)],pch=".")
points(data[mask,c(1,3)],pch=16,cex=.2,col=(cluster$cluster[mask]+1))
plot(data[,c(1,4)],pch=".")
points(data[mask,c(1,4)],pch=16,cex=.2,col=(cluster$cluster[mask]+1))
plot(data[,c(1,5)],pch=".")
points(data[mask,c(1,5)],pch=16,cex=.2,col=(cluster$cluster[mask]+1))
cluster <- optics(data[,-4],minPts = 15, eps=0.02)
#res <- optics_cut(cluster, eps_cl = 0.0195)
res <- extractDBSCAN(cluster, eps_cl = 0.0195)
mask <- res$cluster != 0
column <- 6
plot(data[,c(1,column)],pch=".")
points(data[mask,c(1,column)],pch=16,cex=.5,col=res$cluster[mask]+1)
plot(data[,c(1,2)],pch=".")
points(data[mask,c(1,2)],pch=16,cex=.5,col=(res$cluster[mask]+1))
plot(data[,c(1,3)],pch=".")
points(data[mask,c(1,3)],pch=16,cex=.2,col=(res$cluster[mask]+1))
plot(data[,c(1,4)],pch=".")
points(data[mask,c(1,4)],pch=16,cex=.2,col=(res$cluster[mask]+1))
plot(data[,c(1,5)],pch=".")
points(data[mask,c(1,5)],pch=16,cex=.2,col=(res$cluster[mask]+1))
apply(data,2,range)
plot(mock.data)
library("kohonen")
library("fields")
cluster <- som(mock.data)
plot(cluster, type="code", main="Main")
plot(cluster, type="changes", main="Changes")
plot(cluster, type = "property", property = cluster$codes[[1]][,2], main=names(cluster$data)[2], palette.name=tim.colors)
plot(cluster, type="dist.neighbours")
plot(cluster, type="count")
sample <- sample(dim(data)[1],10000)
dists <- dist(data[sample,])
#dists <- dist(data)
clusters <- hclust(dists, method = 'average')
#clusters <- hclust(dists, method = 'ward.D')
#clusters <- hclust(dists, method = 'ward.D2')
#clusters <- hclust(dists, method = 'single')
#clusters <- hclust(dists, method = 'complete')
#clusters <- hclust(dists, method = 'centroid')
#clusters <- hclust(dists, method = 'median')
#clusters <- hclust(dists, method = 'mcquitty')
plot(clusters)
clusterCut <- cutree(clusters, k=15)
#plot(data[,1],data[,6], col=clusterCut,pch=16,cex=.3)
plot(data[sample,1],data[sample,6], col=clusterCut,pch=16,cex=.3)
clusterCut <- cutree(clusters, k=200)
#plot(data[,1],data[,4], col=clusterCut,pch=16,cex=.3)
plot(data[sample,1],data[sample,4], col=clusterCut,pch=16,cex=.3)
dists <- dist(data[sample,-4])
#dists <- dist(data[,-4])
clusters <- hclust(dists, method = 'average')
clusterCut <- cutree(clusters, k=200)
#plot(data[,1],data[,4], col=clusterCut,pch=16,cex=.3)
plot(data[sample,1],data[sample,4], col=clusterCut,pch=16,cex=.3)
clusters <- hclust(dists, method = 'single')
clusterCut <- cutree(clusters, k=200)
#plot(data[,1],data[,4], col=clusterCut,pch=16,cex=.3)
plot(data[sample,1],data[sample,4],pch=16,cex=.3, col=clusterCut)
library("orclus")
cluster <- orclus(data,k=10,l=3,k0=50,inner.loops=20)
plot(data[,1],data[,6],col=cluster$cluster,pch=".")
for(i in 1:length(cluster$size)) {
scatterplot3d(as.matrix(data) %*% cluster$subspaces[[i]], col = cluster$cluster, ylab = paste("Identified subspace for cluster",i))
}
source('~/Escritorio/CEURA/practicum.r')
dim(cases)
head(cases)
# shuffle
order <- sample(n,1:n,replace(F))
# shuffle
order <- sample(1:n,n,replace(F))
# shuffle
order <- sample(1:n,n,replace=F
)
order
unique(order)
length(unique(order))
n
cases <- cases[order,]
save(cases,"transactions.RData",col.names=T,row.names=F,quote=F)
save(cases,file="transactions.RData",col.names=T,row.names=F,quote=F)
load("~/Escritorio/CEURA/transactions.RData")
dim(cases)
length(cl)
cl <- cl[order]
source('~/Escritorio/CEURA/practicum.r')
source('~/Escritorio/CEURA/practicum.r')
pwd()
setwd("~/Escritorio/Dropbox/CEURA/Curso0R/Rmd")
rmarkdown::render_site()
options()
options(browser)
getOption("browser")
getOption("browser")
browseEnv()
